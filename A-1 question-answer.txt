                         A-1 DECLARATIONS, EXPRESSIONS, AND ASSignments

 Gimple:
 -------
 
main ()
{
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  p = 6;
  a = 10;
  b = 20;
  _1 = a * b;
  c = _1 + 25;
  p = 6;
  q = Z;
  r = 3.45e+1;
  _2 = (int) r;
  Z = _2;
  Z.0_3 = Z;
  _4 = Z.0_3 + 1;
  Z = _4;
  Z.1_5 = Z;
}

QUESTIONS-ANSWER:
-----------------

1   How  do the  declarations  look in  the  GIMPLE? Specifically, what
    happens to multiple  variables declared and initialized on the same
    line? What happens to global declaration [int Z]?
  =>  when you multiple varibles declared and intialized on the same line 
    but they compile one bye one and execute answer.
      global declaration [int Z] is execute as a integer and print integer
    value.
  
2   How are complex  expressions such as [c  = a * b +  25] broken down?
    Can you  determine a  rule as  to when  temporary variables  will be
    introduced?  
  =>  one operation per line. temporaries are introduced whenever an 
    operation is used as an intermediate component of a computation.
    
3   How are  floats/doubles represented in  GIMPLE? What happens  when a
    float/double is assigned to an integer in [Z = r]?
  =>  floats and doubles are represented using scientific notation. an
    explicit cast is inserted when a float is assigned to an int.
    
4   How  are reads/writes  to the  global variable  Z performed?  Why is
    there a temporary introduced  for the statement [Z = Z  + 1] but not
    for the statements [q = Z] or [Z = p]?
  =>  reads/writes to z performed through loads to/stores from locala.a 
    temporary is required for Z=Z+1 because the result of the computation
    Z+1 cannot be written directly to a memory location.
    
    
Optional Problem-Answer:
------------------------


main ()
gimple_bind <
  int a;
  int b;
  int c;
  int p;
  int q;
  double r;

  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <integer_cst, a, 10, NULL, NULL>
  gimple_assign <integer_cst, b, 20, NULL, NULL>
  gimple_assign <mult_expr, _1, a, b, NULL>
  gimple_assign <plus_expr, c, _1, 25, NULL>
  gimple_assign <integer_cst, p, 6, NULL, NULL>
  gimple_assign <var_decl, q, Z, NULL, NULL>
  gimple_assign <real_cst, r, 3.45e+1, NULL, NULL>
  gimple_assign <fix_trunc_expr, _2, r, NULL, NULL>
  gimple_assign <ssa_name, Z, _2, NULL, NULL>
  gimple_assign <var_decl, Z.0_3, Z, NULL, NULL>
  gimple_assign <plus_expr, _4, Z.0_3, 1, NULL>
  gimple_assign <ssa_name, Z, _4, NULL, NULL>
  gimple_assign <var_decl, Z.1_5, Z, NULL, NULL>
  gimple_call <printf, NULL, "%d\n%d\n%d\n", c, q, Z.1_5>
>

  Try to understand the underlying GIMPLE representation by looking at the
  RAW dumps:
 =>   this look like a raw dump of tree nodes - internally, there is a 
   tree structure to gimple, though the dumps normally present it in a
   more human-readable form.










