                          A-2 CONDITIONAL JUMPS AND CONTROL FLOW GRAPHS
                          
                          
Gimple:  
-------


f ()
{
  int a;
  int b;
  int c;

  a = Z;
  if (a <= 9) goto <D.2320>; else goto <D.2321>;
  <D.2320>:
  b = 5;
  c = 17;
  goto <D.2322>;
  <D.2321>:
  b = 6;
  c = 20;
  if (a == 0) goto <D.2323>; else goto <D.2324>;
  <D.2323>:
  c = 0;
  <D.2324>:
  <D.2322>:
  _1 = b * 10;
  _2 = c + _1;
  Z = _2;
}




Quesions-Answer:
----------------

1   How have if-blocks  been translated into GIMPLE  statements? Can you
    differentiate between conditional and unconditional gotos?                       
  =>  If-blocks are turned into conditional gotos to labels. Unconditional gotos
    are a goto by themselves on a line. Conditional gotos always have two labels
    for the taken and not-taken branches.
    

2   Repeat  the  above compilation,  but  now  asking for  another  dump
    that  of  the pass  "cfg".  View  this  pass  and say  whether  this
    representation makes it easier to  read and understand GIMPLEs. Draw
    the control-flow graph  of the program A-2.c on a  piece of paper by
    looking at the CFG dump.
  =>  It's a bit easier to see the control flow in this representation, but
    slightly less concise in terms of number of lines.
    
    
Additional Problem-Answer:
--------------------------


CFG: 
----

;; Function f (f, funcdef_no=0, decl_uid=2314, cgraph_uid=1, symbol_order=1)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
f ()
{
  int c;
  int b;
  int a;

  <bb 2> :
  a = Z;
  if (a <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  b = 5;
  c = 17;
  goto <bb 6>; [INV]


     Try to figure  out how GCC handles the  ternary operator [a ? b  : c] in
     GIMPLE.
   =>  It breaks it into conditional gotos, whose control flow both go into a
     single BB (bb 5 in this case) for assignment to the result. This dump seems to
     suggest that the CFG is not quite the SSA I am used to seeing (e.g. would expect
     something like iftmp.0, iftmp.1 in the different branches and a phi-node at the
     joining BB).












                      
                          
                          
                          
